<?php
require "Calendar.php";
/*
**************************
CLASS RepetitiveTask_Calendar
Version 1.3, build: 8/1/14
Created by Craig Bartle
**************************	
	Dependency: Calendar
	Children: None

	PURPOSE: An object of this class can perform functions associated with a repetitive task schedule
	CONSTRUCTION: (1) $year => the year for which the calendar will be generated by call to superclass Calendar
	USAGE: No actual calendar is created, but any of the public methods will provide information about the 
		   days in the year provided in the constructor. Use info() for function list.
*/
class RepetitiveTask_Calendar extends Calendar
{
	private $_dateTime_Object;
	
//List functions of this object in an HTML table
//PRECONDITIONS: None
//POST-CONDITIONS: None
//RETURN: None
public function info(){
$l1="<tr><td><span style='font-weight:bold;'>";
$l2="</span></td><td>";
$l3="</td></tr>";
print <<< EOL
<pre>
<span style='font-size:x-large;font-weight:bold;'>Class: RepetitiveTask_Calendar</span>
Created by Craig Bartle

This class extends Calendar. An instance of this object can perform functions associated with finding the first full weeks of various time periods. It is based on the PHP DateTime() object.

Dependency: Calendar
Children: None

<span style='font-size:x-large;font-weight:bold;'>Function List</span>
<table border=1>
magic methods
$l1 __construct(\$year) $l2 Constructor, RepetitiveTask_Calendar of specified year $l3
$l1 __destruct() $l2 Destructor $l3
</table>

<table border=1>
$l1 whichBiweeklyCycleIsIt(\$month, \$day) $l2 Returns integer value of the biweekly cycle, starting with cycle 1 as the first full week of the year and alternating every week $l3
$l1 whichQuarterlyCycleIsIt(\$month, \$day) $l2 Returns integer value of the quarterly cycle. Each quarterly cycle starts on the first full week of the quarter $l3
$l1 whichSemiannualCycleIsIt(\$month, \$day) $l2 Returns integer value of the semiannual cycle. Each semiannual cycle starts on the first full week of the half of the year $l3
$l1 whichBimonthlyCycleIsIt(\$month, \$day) $l2  Returns integer value of the bimonthly cycle. Each bimonthly cycle starts on the first full week of the month and alternates every week. Returns 0 if the bimonthly cycle has already occurred twice that month (for months with 5 weeks) $l3
$l1 getFirstSundayOfQuarter(\$quarter) $l2 Returns DateTime() for Sunday of the first full week of the specifed quarter $l3
$l1 getFirstSundayOfSemiAnnual(\$half) $l2 Returns DateTime() for Sunday of the first full week of the specifed half of the year $l3
$l1 getFirstSundayOfYear() $l2  Returns DateTime() for Sunday of the first full week of the year $l3
$l1 getFirstSundayOfMonth(\$month) $l2 Returns DateTime() for Sunday of the first full week of the month specified $l3
</table>

</pre>
EOL;
	}	
	
	//Constructor
	//PRECONDITIONS: None 
	//POST-CONDITIONS: $this->_dateTime_Object is instantiated as 'January 1, $year'
	//RETURN: None
	public function __construct($year){
	parent::__construct($year);
	$this->_dateTime_Object = new DateTime();
	$this->_dateTime_Object->setDate($year, 1, 1);
	}
	
	//Destructor
	//PRECONDITIONS: An instance of this object is no longer accessible
	//POST-CONDITIONS: The object is destroyed
	//RETURN: None
	public function __destruct(){
	parent::__destruct();
	}

	//Which bi-weekly cycle are we in?
	//PRECONDITIONS: None
	//POST-CONDITIONS: None
	//RETURN: Integer of the bi-weekly cycle
	public function whichBiweeklyCycleIsIt($month, $day){
	$week_number = $this->getWeekNumberOfYear($month, $day);
	switch($week_number%2)
		{
			case 0:
				$cycle = 2;
				break;
			case 1:
				$cycle = 1;
				break;
		}
	return $cycle;
	}

	//Which quarterly cycle are we in?
	//PRECONDITIONS: None
	//POST-CONDITIONS: None
	//RETURN: Integer of the quarterly cycle
	public function whichQuarterlyCycleIsIt($month, $day){
	$given_day = clone $this->_dateTime_Object;
	$given_day->setDate($given_day->format('Y'), $month, $day);
	$given_month = $given_day->format('m');
	$Sunday_this_week = $this->getFirstOfWeek($month, $day);
	if($given_month == 1 && $Sunday_this_week->format('m') == 12)
		{
			$which_quarterly = 4;
		}
	elseif($given_month == 4 && $Sunday_this_week->format('m') == 3)
		{
			$which_quarterly = 1;
		}
	elseif($given_month == 7 && $Sunday_this_week->format('m') == 6)
		{
			$which_quarterly = 2;
		}
	elseif($given_month == 10 && $Sunday_this_week->format('m') == 9)
		{
			$which_quarterly = 3;
		}
	else
		{
			switch(true)
				{
					case($given_month < 4):
						$which_quarterly = 1;
						break;
					case($given_month < 7):
						$which_quarterly = 2;
						break;
					case($given_month < 10):
						$which_quarterly = 3;
						break;
					case($given_month <= 12);
						$which_quarterly = 4;
						break;
				}
		}
	return $which_quarterly;
	}
	
	//Which semi-annual cycle are we in?
	//PRECONDITIONS: None
	//POST-CONDITIONS: None
	//RETURN: Integer of the semi-annual cycle
	public function whichSemiannualCycleIsIt($month, $day){
	$given_day = clone $this->_dateTime_Object;
	$given_day->setDate($given_day->format('Y'), $month, $day);
	$Sunday_this_week = $this->getFirstOfWeek($month, $day);
	if($given_day->format('m') == 1 && $Sunday_this_week->format('m') == 12)
		{
			$which_semi_annual = 2;
		}
	elseif($given_day->format('m') == 6 && $Sunday_this_week->format('m') == 5)
		{
			$which_semi_annual = 1;
		}
	elseif($given_day->format('m') < 6)
		{
			$which_semi_annual = 1;
		}
	else
		{
			$which_semi_annual = 2;
		}
	return $which_semi_annual;
	}

	//Which bi-monthly cycle are we in?
	//PRECONDITIONS: None
	//POST-CONDITIONS: None
	//RETURN: Integer of the bi-monthly cycle. Returns 0 if we're not within the 4 full weeks of a month	
	public function whichBimonthlyCycleIsIt($month, $day){
	$week_number = $this->getWeekNumberOfMonth($month, $day);
	$Sunday_this_week = $this->getFirstOfWeek($month, $day);
	if($Sunday_this_week->format('m') < $month)
		{
			return 0;
		}
	switch($week_number%2)
		{
			case 0:
				$cycle = 2;
				break;
			case 1:
				$cycle = 1;
				break;
		}
	if($week_number == 5)
		{
			$cycle = 0;
		}	
	return $cycle;
	}
	
	//What is the first week of the quarter?
	//PRECONDITIONS: None
	//POST-CONDITIONS: None
	//RETURN: PHP DateTime() object for the Sunday of the first full week of the quarter specifed
	public function getFirstSundayOfQuarter($quarter){
	$week_iterator = new DateInterval('P7D');
	$first_of_quarter = $this->getFirstOfQuarter($quarter);
	$Sunday_of_first_of_quarter = $this->getFirstOfWeek($first_of_quarter->format('m'), $first_of_quarter->format('d'));
	if($Sunday_of_first_of_quarter->format('m') != 1 || 4 || 7 || 10)
		{
			$Sunday_of_first_of_quarter->add($week_iterator);
		}
	return $Sunday_of_first_of_quarter;
	}
	
	//What is the first week of the semi-annual?
	//PRECONDITIONS: None
	//POST-CONDITIONS: None
	//RETURN: PHP DateTime() object for the Sunday of the first full week of the semi-annual specified
	public function getFirstSundayOfSemiAnnual($half){
	$dateTime_to_return = $this->getFirstOfSemiAnnual($half);
	if($dateTime_to_return->format('l') != "Sunday")
		{
			$week_iterator = new DateInterval('P7D');
			$dateTime_to_return->add($week_iterator);
		}
	return $this->getFirstOfWeek($dateTime_to_return->format('m'), $dateTime_to_return->format('d'));
	}
	
	//What is the first week of the year?
	//PRECONDITIONS: None
	//POST-CONDITIONS: None
	//RETURN: PHP DateTime() object for the Sunday of the first full week of the year
	public function getFirstSundayOfYear(){
	return $this->getSundayOfWeekOfMonth(1,1);
	}
	
	//What is the first week of the month?
	//PRECONDITIONS: None
	//POST-CONDITIONS: None
	//RETURN: PHP DateTime() object for the Sunday of the first full week of the month specified
	public function getFirstSundayOfMonth($month){
	return $this->getSundayOfWeekOfMonth(1,$month);
	}
}
?>
